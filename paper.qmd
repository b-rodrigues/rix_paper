---
title: "Reproducible development environments with rix"
format:
    jss-pdf:
        keep-tex: true
    jss-html: default
author:
  - name: Bruno Rodrigues 
    affiliations:
      - name: Ministry of Research and Higher education, Luxembourg 
        department: Department of Statistics
        address: 18, Montée de la Pétrusse
        city: Luxembourg 
        country: Luxembourg 
        postal-code: 2327
      - Journal of Statistical Software
    orcid: 0000-0002-3211-3689
    email: bruno@brodrigues.co
    url: https://www.brodrigues.co 
  - name: Philipp Baumann
    affiliations:
      - Plus Affiliation
abstract: |
  In order create an analysis that is reproducible,
  it is not enough to write clean code and document it well. One
  must also make sure to clearly list all the dependencies of the analysis
  and ideally provide an easy way to install them.
  There are several tools that can be used to list dependencies and to
  make them easily installable by someone that wishes to reproduce a study,
  such as [Docker]{.proglang}, a containerization solution. This paper will
  present another tool that can be used to make projects reproducible,
  the  [Nix]{.pkg} package manager, and an [R]{.proglang} package 
  called [rix]{.pkg} that makes using  [Nix]{.pkg} much simpler 
  for users of [R]{.proglang}.

keywords: [reproducibility, R, Nix]
keywords-formatted: [reproducibility, "[R]{.proglang}", " [Nix]{.pkg}"]

bibliography: bibliography.bib
---

## Introduction: Reproducibility is also about software {#sec-intro}

@peng2011 introduced the idea of reproducibility being on a continuum: on one of
the ends of this continuum, we only have access to the paper describing the
studies, which is not reproducible at all. If in addition to this paper authors
make the original source code of the analysis available, reproducibility is
improved. Adding the original data improves reproducibility yet again. Finally,
if to all this the authors add what Roger Peng referred to as the *linked and
executable code and data*, we reach the gold standard of reproducibility.

*Linked and executable code and data* refer to the compiled source code scripts,
but for the purposes of this article, we will assume this meas the
*computational environment*. The computational environment is all the software
required to run the analysis. Here too, we can speak of a continuum. One could
simply name and list the software used: for example, the [R]{.proglang}
programming language. Sometimes, authors have the courtesy to also state the
version of [R]{.proglang} used. Some authors go further, and also list the
packages used, and ideally with their versions as well. Authors rarely state the
operating system on which the analysis was done, even though it has been shown
that running the same analysis with the same software but on different operating
systems could lead to different results, as described in @neupane2019. Authors
also only very rarely provide instructions to install the required tools and
software in order to reproduce their studies.

But even assuming that authors provided clear instructions to install the exact
requirements of a study, it might happen that these instructions do not even
work on different platforms, or on different versions of the same platform. And
reproducibility is not the only activity that might get impacted by a lack of
clear instructions: if an author works on several machines, the exact same
computational environment should be used on all the machines, and the same is
true when a team of authors collaborate.

There are tools available that authors can use to reach the gold standard of a
fully reproducible study, or to successfully deploy the same development
environment on several machines. Let us first consider the task of listing the
software used. [R]{.proglang} provides the `sessionInfo()` function whose output
can be saved into a file. Below is an example output of `sessionInfo()`:

```{r, eval = FALSE}
sessionInfo()
```

```
R version 4.3.2 (2023-10-31)
Platform: aarch64-unknown-linux-gnu (64-bit)
Running under: Ubuntu 22.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/aarch64-linux-gnu/openblas-pthread/libblas.so.3 
LAPACK: /usr/lib/aarch64-linux-gnu/openblas-pthread/libopenblasp[...]

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

time zone: Etc/UTC
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods
[7] base

other attached packages:
[1] nnet_7.3-19  mgcv_1.9-0   nlme_3.1-163

loaded via a namespace (and not attached):
[1] compiler_4.3.2 Matrix_1.6-1.1 tools_4.3.2    splines_4.3.2
[5] grid_4.3.2     lattice_0.21-9
```

If an author provides this information, other people trying to reproduce the
study (or the author him- or herself in the future), or co-authors, can read
this file and see which version of [R]{.proglang} was used, and which packages
(and their versions) were used as well. However, others would still need to
install the correct versions of each package manually. This can be in certain
cases challenging, especially if packages that depend on system-level
dependencies are required. For example, the [nloptr]{.pkg} package requires a
binary of [nlopt]{.proglang} to be available, or if not, [cmake]{.proglang} on
Linux or macOS.

A better alternative to simply listing packages and their versions is to use the
[renv]{.pkg} package which generates a so-called `renv.lock` file which also
lists [R]{.proglang} and package versions. Here is an example of such an
`renv.lock` file:

```
{
"R": {
  "Version": "4.2.2",
  "Repositories": [
  {
   "Name": "CRAN",
   "URL": "https://packagemanager.rstudio.com/all/latest"
  }
  ]
},
"Packages": {
  "MASS": {
    "Package": "MASS",
    "Version": "7.3-58.1",
    "Source": "Repository",
    "Repository": "CRAN",
    "Hash": "762e1804143a332333c054759f89a706",
    "Requirements": []
  },
  "Matrix": {
    "Package": "Matrix",
    "Version": "1.5-1",
    "Source": "Repository",
    "Repository": "CRAN",
    "Hash": "539dc0c0c05636812f1080f473d2c177",
    "Requirements": [
      "lattice"
    ]

    ***lines below omitted***
```

This file lists every package alongside their versions and the repository from
which they were downloaded. Generating this file only requires one to run the
`renv::init()` function. Someone else can then restore the same package library
by running `renv::restore()`. The exact same packages get installed in an
isolated, project-specific library which doesn't interfere with the main
library of the user. [renv]{.pkg} does not restore the [R]{.proglang} version
used though, so installing the right version of [R]{.proglang}needs to be handled
separately. [renv]{.pkg} will also not install system-level dependencies such
as [cmake]{.pkg} for [nloptr]{.pkg} on Linux or macOS, so these still need to
be handled separately, as described in [renv]{.pkg}’s Readme: 
\url{https://rstudio.github.io/renv/articles/renv.html#caveats}.

Before continuing, it should be noted that other packages exist which provide
similar functionality to [renv]{.pkg}: there is [groundhog]{.pkg} by
@simonsohn2023 which makes it rather easy to install packages as they were on
CRAN at a given date. For example, the code snippet below installs the
[purrr]{.pkg} and [ggplot2]{.pkg} packages as they were on April 4th, 2017:

```
groundhog.library("
    library(purrr)
    library(ggplot2)",
    "2017-10-04",
    tolerate.R.version = "4.2.2")
```

These packages also get installed in a project-specfic library so there is no
interference between these packages and other versions of the same packages that
one might use for other projects. Because [groundhog]{.pkg} does not install
[R]{.proglang} itself, users should either install the required version
themselves, or they should use the `tolerate.R.version` argument as shown in the
example above. Otherwise, [groundhog]{.pkg} would not continue with the
installation of the packages. Another alternative to [renv]{.pkg}, developed by
@chan2023 is [rang]{.pkg}, which also installs packages as they were on a given
date. Yet another way to install packages as they were on a give date is to use
the Posit Package Manager, which provides snapshots of CRAN. For example, to
install the required packages for an analysis as they were on the 30th of June
2023, one could add the following line to the `.Rprofile` file:

```
options(repos =
  c(REPO_NAME =
    "https://packagemanager.posit.co/cran/__linux__/jammy/2023-06-30"
  )
)
```

The `.Rprofile` file gets read by [R]{.proglang}when starting a new session, which means
that every call to the `install.packages()` function will now install the
packages from this snapshotted mirror. However, unless the user explicitly and
manually manages the different projects' libraries, using the Posit Package
Manager will install all the package for all the projects at the given date.

The next step in reaching the gold standard of reproducibility would be to not
only install the right packages used for the analysis, but also the right
version of [R]{.proglang}. Of course, it would be possible to install the right
version manually, but here too, there are tools that simplify the process. One
such tool is [rig]{.pkg} by the [R]{.proglang}infrastructure team [-@rlib2023]. [rig]{.pkg}
makes it easy to install different versions of [R]{.proglang}, so one could use
it to install the right version to reproduce an analysis, and then use one of
the listed packages above to install the right library of [R]{.proglang}
packages. However, this involves many manual steps and is thus error prone and
time-consuming.

The final tool one could use to reach the gold standard of reproducibility is to
package the right version of [R]{.proglang} and [R]{.proglang} packages inside a
[Docker]{.pkg} image. [Docker]{.pkg} is a containerisation tool: using
[Docker]{.pkg} it is possible to package some *data product* with its
dependencies into an image. A statistical analysis, from the simplest to the
most complex one, can be seen as such a data product that requires many software
dependencies. *Dockerizing* an analysis consists in first building an image: in
the build step, the dependencies of the analysis have to be installed and this
can be achieved using the tools mentioned above. The scripts to run the analysis
and the data are also added to the image at build time. These steps are written
down in a simple text file called a `Dockerfile`. This `Dockerfile` is the
definition of the [Docker]{.pkg} image.

It is possible to then execute the code of a study inside a so-called container,
which is a running instance of an image. Executing, or running, these containers
is done non-interactively, and so it is possible to instantiate the correct
environment to run a study in a single command.

The advantage of using [Docker]{.pkg} is not only about having the right version
of [R]{.proglang} and [R]{.proglang} packages bundled alongside the analysis
scripts: [Docker]{.pkg} images are actually almost complete Linux operating
systems, which means that system-level dependencies also get bundled into the
image. This is especially useful for packages that rely on external system-level
dependencies to run, such as for [nloptr]{.pkg}, as these external system-level
dependencies are thus also made available to future replicators of the study
within the [Docker]{.pkg} image. The image can also be shared.

The Rocker project initiated by @boettiger2017 provides many pre-built
[Docker]{.pkg} to the [R]{.proglang} community of users, already containing
specific [R]{.proglang} versions and even packages. These images can be used as
bases to build other images containing statistical analyses more easily than
starting from a bare-bones image.

While [Docker]{.pkgs} offers a great solution to the reproducibility problem, it
can be awkward to work interactively from a running container: containers can be
changed at run-time, but any change will be lost once the container is stopped.
Also, while it is possible to launch graphical programs from a container, this
is generally not easy to set up and only works, as far as we know, only on Linux
operating systems. In most cases, users of [Docker]{.pkg} will instead use the
container to run a web server and the web based application of a popular
integrated development environment (IDE).

A common approach seems to be to work on a study interactively using a standard
installation of [R]{.proglang}and [R]{.proglang}packages, and after the study is done, take some time to
write the required `Dockerfile` to provide an easy way for future replicators to
reproduce the results of the study. But this approach does not solve the problem
of deploying the same environment on several machines, and so ideally authors
would develop using a containerized development environment. Another challenge
of using [Docker]{.pkg} is that, as stated already, [Docker]{.pkg} images are
actually almost complete Linux operating systems, so experience with Linux is
highly recommended if one wishes to properly write a `Dockerfile`. Finally, one
also needs to be careful and write the `Dockerfile` in such a way that the build
process will always result in the same image. This is only possible if a
specific digest of a base image is used instead of a tagged version, but in
practice, this is rarely done.

A final, and optional, step towards the gold standard is to use a build
automation tool such as [Make]{.pkg} to run the whole analysis when the
container is executed, instead of executing scripts. Build automation tools make
it easier to run arbitrary code in a series of well-defined steps.
[R]{.proglang} programmers can use the [targets]{.pkg} by @landau2021 as a build
automation tool.

@mcdermott2021 is an example of a scientific study that reached the gold
standard of reproducibility. The author of this paper set up an accompanying
Github repository to the
paper^[https://github.com/grantmcdermott/skeptic-priors] containing all the
instructions to install the required software and then run the analysis. If we
take a closer look at this repository, we will notice that many of the tools
previously mentioned were used to capture the compatutational environment and
make it available to other researchers:

- Packages and their versions were listed and saved into an `renv.lock` file;
- A `Makefile` was used to run the whole analysis and compile the paper;
- A `Dockerfile` was used to provide the complete computational environment,
  including the right version of [R]{.proglang}, to run the whole analysis
  easily.

However, reaching this gold standard is quite costly: one needs to learn a tool
to deal with package versions, then [Docker]{.pkg} for all the other software,
including the programming language that was used. Ideally, a build automation
tool such as [Make]{.pkg} should be added to the list. It should also be noted
that these requirements are not limited to the [R]{.proglang} programming
language. A very similar approach should be taken if one uses
[Python]{.proglang}, or any other programming language. Furthermore, the
previous discussion also implies that for an analysis to actually be
reproducible at all, it must be made using free and open source software, as
proprietary software cannot be freely shared with others that wish to reproduce
a study, and there's no guarantee that others will have access to the
proprietary software used.

As an alternative to the above approach, we will present the [Nix]{.pkg} package
manager, which is available for all major operating systems and focuses on
installing and building software in a reproducible manner. This means that this
single tool can replace not only [Docker]{.pkg} but also [renv]{.pkg} and even a
build automation tool such as [Make]{.pkg}. To make [Nix]{.pkg} more accessible
to [R]{.proglang} programmers, we developed the [rix]{.pkg} package which we
will present in this article.

## The Nix package manager {#sec-nix}

[Nix]{.pkg} is a package manager that can be used to install and build software
in a completely reproducible manner. As of writing, it contains more than
100.000 packages, including almost the entirety of CRAN and Bioconductor. This
means that using [Nix]{.pkg}, it is possible to install not only [R]{.proglang},
but also all the packages required for a project. [Nix]{.pkg} is actually the
package manager of a Linux distribution called NixOS, but can be installed as a
stand-alone tool for other Linux distributions, macOS, and on the Windows
Subsystem for Linux on Windows^[Which means that in practical terms, non-Nixos
Linux distributions and Windows can be considered as the same platform.]. 

The reason why one should use [Nix]{.pkg} to install [R]{.proglang} packages,
and not use the usual, built-in, `install.packages()` [R]{.proglang} function
instead, is that when installing a package with [Nix]{.pkg}, [Nix]{.pkg} makes
sure to install every dependency of every package, whether this dependency is
another [R]{.proglang} package or a system-level dependency.

For example, the [xlsx]{.pkg} [R]{.proglang} package requires the
[Java]{.proglang} programming language to be installed to successfully install.
Depending on what system one tries to install [xlsx]{.pkg}, installing
[Java]{.proglang} might not be easy, nor even possible. But with [Nix]{.pkg}, it
suffices to declare that the [xlsx]{.pkg} package is needed for the project, and
[Nix]{.pkg} will install [Java]{.proglang} and configure it. This is possible
because the maintainers of the [R]{.proglang} language for [Nix]{.pkg} declared
[Java]{.proglang} as a dependency of [xlsx]{.pkg}. From the perspective of the
end-users, this all happens automatically, thanks to the efforts of the
maintainers.

[xlsx]{.pkg} can thus be referred to as a component closure, and quoting
@dolstra2004nix:

> The idea is to always deploy component closures: if we deploy a component,
> then we must also deploy its dependencies, their dependencies, and so on. That
> is, we must always deploy a set of components that is closed under the
> ''depends on'' relation. Since closures are selfcontained, they are the units
> of complete software deployment. After all, if a set of components is not
> closed, it is not safe to deploy, since using them might cause other
> components to be referenced that are missing on the target system.

But how does [Nix]{.pkg} achieve this? Where do these packages, or closures,
come from? When installing a package using [Nix]{.pkg}, an expression written in
the [Nix]{.pkg} programming language gets downloaded from the `nixpkgs` Github
repository and evaluated. `nixpkgs` is the name of the repository that contains
the more than 100'000 pieces of software that can be installed with the
[Nix]{.pkg} manager. Expressions contain so-called *derivations*. A derivation
defines a build: its dependencies, commands to build and install the package in
question, and then an output. Most of the time, a derivation downloads source
code, builds the software from the source and then outputs a compiled binary.
Derivations are extremely flexible, and by writing one's own, it is possible to
define and build an environment for a project in a reproducible manner. The
dependencies of these derivations are also defined in other expressions, which
will also get installed if needed. As explained above, the maintainers of
[R]{.proglang} for [Nix]{.pkg} declare the right dependencies for the packages
to turn them into component closures.

But why is installing software with [Nix]{.pkg} reproducible? Because the whole
set of [Nix]{.pkg} expressions is hosted on GitHhub, it is possible to use a
specific commit of `nixpkgs` to ensure reproducibility of our project. Using a
specific commit of `nixpkgs` is called *pinning a revision (or commit)*. Pinning
a revision ensures that every package that [Nix]{.pkg} installs will always be at
exactly the same versions, regardless of when in the future the packages get
built. This is because the [Nix]{.pkgs} expressions that get downloaded when
pinning are the expressions as they were at that commit of `nixpkgs`.

While pinning revisions is essential for reproducibility, this is not the only
reason [Nix]{.pkg} is very useful for reproducibility, but the [Nix]{.pkg}
package manager itself was designed with reproducibility in mind. [Nix]{.pkg} is
a functional package manager, meaning that it uses concepts from functional
programming to build software: no-side effects or global variables are allowed,
and the output is always the same if given the same inputs, regardless of where
or when a package gets built (an important side-note is in order here: while the
functional aspect of [Nix]{.pkg} is quite useful to ensure reproducibility, it
can lead to situations where writing the required [Nix]{.pkg} expression to
build it can be much more difficult than usual: this is especially true for
packages that must download assets from the internet during installation, such
as several BioConductor packages like [musData]{.pkg} for example. But this is
only a concern for the packagers, not users of the package that simply wish to
install and use the package). [Nix]{.pkg} also allows for multiple versions (or
variants in the [Nix]{.pkg} jargon) to be installed at the same time on the same
system. Each variant of a package has a unique identifier, so that it is
possible to have two versions of [R]{.proglang} installed and use the correct
one where adequate. We refer to @dolstra2004nix for a more technical discussion
on [Nix]{.pkg}.

With Nix, it is essentially possible to replace [renv]{.pkg} and
[Docker]{.proglang} combined, or in the case of [Python]{.proglang}, replace
`requirements.txt` files which list package dependencies for [Python]{.proglang}
projects and virtual environments. It is also possible to build multi-language
environments, containing [R]{.proglang}and Python, a LaTeX distribution, and even install
one's favorite text editor to edit the project's source code. Essentially, one
can define a complete, project-specific, and reproducible environment and use it
interactively, or non-interactively. It will always be possible to rebuild this
environment in the future (as long as the `nixpkgs` GitHub repository is online)
to run an analysis sometime in the future.

[Nix]{.pkg} has a fairly high entry cost though. [Nix]{.pkg} is a complex piece
of software that comes with its own programming language, which is also called
[Nix]{.proglang}. Its purpose is to solve a complex problem: defining
instructions on how to build software packages and manage configurations in a
declarative way. This makes sure that software gets installed in fully
reproducible manner, on any operating system or hardware. To increase
[Nix]{.pkg}’s adoption, we wrote the [rix]{.pkg} package.

## Reproducible development environments with [Nix]{.pkg} {#sec-repro-nix}

As already stated,  [Nix]{.pkg} expressions are written in the  [Nix]{.proglang}
programming language, which is a purely functional programming language. Here is
a simple expression that builds a shell environment containing version 4.3.1 of
[R]{.proglang}:

```
let
  pkgs = import (fetchTarball 
    "https://github.com/NixOS/nixpkgs/archive/976fa336....tar.gz"
  ) {};
  system_packages = builtins.attrValues {
    inherit (pkgs) [R]{.proglang};
  };
in
  pkgs.mkShell {
    buildInputs = [ system_packages ];
    shellHook = "R --vanilla";
  }
```

To define a variable in the [Nix]{.proglang} language, the `let` keyword is
used, so the first lines of this expression define the variables called `pkgs`
and `system_pkgs`. `pkgs` is defined as the set of packages to be used in this
derivation. In this example, the package expressions are going to be pulled from
the official `nixpkgs` GitHub repository, and in particular the commit starting
with `976fa336` is going to be used. `system_pkgs` lists the packages that we
wish to install and use with this environment; in this example only the
[R]{.proglang} programming language will be installed, alongside all of its
dependencies, and all of the dependencies’ dependencies. Finally, the `mkShell`
function is used to build a development shell containing the set of packages
defined by the variable `system_packages` and its `shellHook` is set to `R
--vanilla`: this means that when entering the shell, [R]{.proglang} will be
started with the `--vanilla` flag (thus ignoring any startup options).

This expression can be saved in a file called `default.nix`, and the shell can
be built using the `nix-build` command on a system where  [Nix]{.pkg} is
available.^[To install  [Nix]{.pkg} we recommend the installer from
Determinate systems which can be found on the following link:
\url{https://determinate.systems/posts/determinate-nix-installer}.] Once
`nix-build` is done building the development environment according to the
specifications declared in the `default.nix` file, the user can enter the
development shell using `nix-shell`. The user will thus be dropped into an
interactive shell with all the packages declared in the `default.nix` file and
can now use this shell for work. This is similar to activating virtual
environments in the [Python]{.proglang} ecosystem.

Obviously, writing such an expression will be quite complicated for someone that
is unfamiliar with the [Nix]{.proglang} programming language, but the prospect
of being able to define a completely reproducible development environment in a
single text file and then use that file to build and use that environment
anywhere is quite appealing. Because we believe that lowering the cost of
writing [Nix]{.proglang} expressions would lead to a wider adoption of the
[Nix]{.pkg} package manager for reproducibility, we developed [rix]{.pkg}.
[rix]{.pkg} comes with the `rix()` function that helps generate such expressions
quite easily. [rix]{.pkg} is available on CRAN and can be installed as any other
package, but it is also possible to use it to bootstrap an [R]{.proglang}
development environment on a system where [R]{.proglang} is not available (but
[Nix]{.pkg} is). One simply needs to run this line inside a terminal:

```
nix-shell -p [R]{.proglang}rPackages.rix"
```

to be dropped in a temporary [R]{.proglang} session where [rix]{.pkg} is
available.^[`nix-shell -p` starts an interactive shell where the package
specified with the `-p` flag are present.] From there, it is possible to
generate new [Nix]{.pkg} expressions to build new environments. For example,
here is how one could use [rix]{.pkg} to generate a `default.nix` file that
installs version 4.3.1 of [R]{.proglang} and the [dplyr]{.pkg} and
[chronicler]{.pkg} packages (we don't show the generated expression here because
of space):

```{r, eval = F}
library(rix)

rix(r_ver = "4.3.1",
    r_pkgs = c("dplyr", "chronicler"),
    project_path = ".",
    overwrite = TRUE)
```

[rix]{.pkg} can also generate much more complex expressions:

```{r, eval = F}
rix(r_ver = "4.3.1",
    r_pkgs = c("dplyr", "chronicler", "AER@1.2-8"),
    system_pkgs = c("quarto", "git"),
    tex_pkgs = c(
          "amsmath",
          "framed",
          "fvextra",
          "environ",
          "fontawesome5",
          "orcidlink",
          "pdfcol",
          "tcolorbox",
          "tikzfill"
    ),
    git_pkgs = list(
                 list(package_name = "rix",
                   repo_url = "https://github.com/b-rodrigues/rix/",
                   branch_name = "master",
                   commit = "ea92a88ecdfc2d74bdf1dde3e441d008521b1756"),
                 list(package_name = "fusen",
                   repo_url = "https://github.com/ThinkR-open/fusen",
                   branch_name = "main",
                   commit = "d617172447d2947efb20ad6a4463742b8a5d79dc")
    ),
    ide = "positron",
    project_path = ".",
    overwrite = TRUE)
```

The above call to `rix()` generates an expression that installs several
[R]{.proglang} packages ([AER]{.pkg} version 1.2-8 gets installed, which is an
older version of the package and also installs
several TeXLive packages for authoring documents with \LaTeX, the development
versions of [rix]{.pkg} and [fusen]{.pkg} (downloaded from Github), and finally
the Positron integrated development environment. You can see the resulting `default.nix` file in the @sec-appendix.

[rix]{.pkg}'s documentation also provides installation instructions for Nix, but
[rix]{.pkg} can generate [Nix]{.pkg} expression even if [Nix]{.pkg} is not installed on one's
system. This is quite useful if one wants to generate an expression and use that
expression in a CI/CD environment such as Github Actions. For example, the
repository that contains the source code to this
article^[https://github.com/b-rodrigues/rix_paper] uses Github Actions for
compilation. Each time one of the authors pushed to the master branch, a Github
Actions runner would be started,  [Nix]{.pkg} would get installed on said
runner, and an environment containing the right packages was generated from a
`default.nix` file that is hosted on the same repository. The paper would then
get compiled using [Quarto]{.pkg} in this reproducible environment.

Instead of first dropping into a [Nix]{.pkg} shell it is also possible to
directly run a program from the environment:

```
cd /absolute/path/to/project/ && nix-shell default.nix --run "Rscript analysis.R"
```

This will run `Rscript` and execute the `analysis.R` script (which in this
example should be in the same directory as `default.nix`).

## rix uses a fork of Nixpkgs

As previously explained, when invoked, the [Nix]{.pkg} package manager will use
expressions hosted on the `nixpkgs` GitHub repository to build software.
However, when generating expressions with [rix]{.pkg} our fork
`rstats-on-nix/nixpkgs` is used instead.

Using a fork instead of the official upstream `nixpkgs` repository has several
advantages.

The first thing we need to stress, is that it is important to keep in mind that
the [Nix]{.pkg} package manager is first and foremost the package manager of a
Linux distribution called NixOS, and as such, several technical and governance
choice have to be made that limit what we, the authors of [rix]{.pkg} want to offer
to the users of `{rix}`. For our needs, having a fork gives us more flexibility.

For example, while it is technically possible for [Nix]{.pkg} to provide many versions
(or variants, in [Nix]{.pkg} jargon) of the same package (for example, you can
install the latest [Emacs]{.pkg} by installing the `emacs` package, or
[Emacs]{.pkg} 28 by installing `emacs28`) this ultimately depends on whether the
maintainer wishes to package several variants, or whether it is practical. In
the case of the [R]{.proglang} ecosystem, with more than 20'000 CRAN and
Bioconductor packages, that is not possible for the maintainers to provide
several variants of the same packages. So for a given `nixpkgs` commit, it is
not possible to easily install a specific version of an [R]{.proglang} package
that is not included in that particular `nixpkgs` commit. Instead, [rix]{.pkg}
can install it from source with this syntax:

```{r, eval = FALSE}
rix(..., r_pkgs = "dplyr@1.0.7", ...)
```

However, some packages might need specific fixes to be successfully installed
by [Nix]{.pkg} (as explained in the case of [xlsx]{.pkg} previously) and thus
trying to install packages like this might fail.

Furthermore, it isn't practical to update the whole of the [R]{.proglang}
packages set on [Nix]{.pkg} every day: so while CRAN and Bioconductor get
updates daily, the [R]{.proglang} packages set on [Nix]{.pkg} gets updated only
around new releases of R. Again, this is a consequence of [Nix]{.pkg} being
first and foremost the package manager of a Linux distribution with its own
governance; daily updates of more than 20'000 package is simply not feasible.

Because of these reasons, we decided to fork `nixpkgs`: because it is a fork, we
can afford to do things in a way that could not be possible or practical for
upstream.

The first thing this fork allows us to do is offer a daily snapshot of CRAN.
Every day, thanks to Github Actions, the [R]{.proglang} packages set gets
updated, and the result commited to a dated branch. This has been going on since
the 14th of December 2024 (see
[here](https://github.com/rstats-on-nix/nixpkgs/tree/2024-12-14)). So when users
set a date as in `rix(date = "2024-12-14", ...)` the specified dated branch from
the fork is going to get used. 


But this doesn’t mean that we recommend you
use any date from the `rstats-on-nix/nixpkgs` fork: instead, each Monday,
another action uses this fork and tries to build a set of popular packages on
Linux and macOS, and only if this succeeds is the date added through a PR to the
list of available dates on `{rix}`!

The reason this is done like this is to manage another *risk* of the upstream
`nixpkgs`. As you know, `nixpkgs` is huge, and though the utmost care is taken
by contributors and the PR review process is very strict, it can happen that
updating packages breaks other packages. For example recently RStudio was in a
broken state due to an issue in one its dependencies, `boost`. This is not the
fault of anyone in particular: it's just that packages get updated and packages
that depend on them should get updated as well: but if that doesn't happen
quickly enough, the `nixpkgs` maintainer faces a conundrum. Either he or she
doesn't update the package because it breaks others, but not updating a package
could be a security vulnerability, or he or she updates the package, but now
others, perhaps less critical packages are broken and need to be fixed, either
by their upstream developers, or by the `nixpkgs` maintainer of said packages.
In the case of RStudio a fix was proposed and promptly merged, but if you wanted
to install RStudio during the time it took to fix it, you would have faced
an error message, which isn't great if all you want is use [Nix]{.pkg} shells as
development environments.

So for us, having a fork allows us to backport these fixes and so if you try to
install RStudio using the latest available date, which is `"2025-02-10"`, it’s
going to work, whereas if you tried to build it on that date using upstream
`nixpkgs` you'd be facing an error!

We spent quite some time backporting fixes: we went back all the way to
2019. The way this works, is that we start by checking out a `nixpkgs` commit on
selected dates, then we "update" the [R]{.proglang}packages set by using the Posit CRAN and
Bioconductor daily snapshots. Then, we backport as many fixes as possible, and
ensure that a selection of popular packages work on both x86-linux (which
includes Windows, through WSL) and aarch64-darwin (the M-series of Macs). Then
we commit everything to a dated branch of the `rstats-on-nix/nixpkgs` fork. You
can check out all the available dates by running: `rix::available_dates()`.
We're pretty confindent that you should not face any issues when using [Nix]{.pkg} to
build reproducible environments for R. However, should you face a problem, don't
hesitate to open an issue!

We have now packages and [R]{.proglang}versions working on Linux and macOS from March 2019
to now. See [this
repository](https://github.com/rstats-on-nix/daily_cran/blob/master/readme.md)
that contains the scripts that allowed us to do it. Backporting fixes was
especially important for Apple Silicon computers, as it took some time for this
platform to work correctly on Nix. By backporting fixes, we can now provide
olders versions of these packages for Apple Silicon as well!

Using this approach, our fork now contains many more versions of working R
packages than upstream. [rix]{.pkg} will thus likely keep pointing towards our fork
in the future, and not upstream anymore. This should provide a much better user
experience. An issue with our fork though, is that by backporting fixes, we
essentially create new [Nix]{.pkg} packages that are not included in upstream, and thus,
these are not built by Hydra, Nix's CI platform which builds binary packages. In
practice this means that anyone using our fork will have to compile many
packages from source. Now this is pretty bad, as building packages from source
takes quite some time. But fear not, because thanks to
[Cachix](https://www.cachix.org/) we now also have a dedicated binary cache of
packages that complements the default, public [Nix]{.pkg} cache! We provide instructions
on how to use Cachix, it's very easy, it's just running 2 additional commands
after installing Nix. Using Cachix speeds up the installation process of
packages tremendously. I want to give my heartfelt thanks to
[Domen Kožar](https://www.cachix.org/about) for sponsoring the cache!

Another thing we do with our fork is run an action every day at midnight, that
monitors the *health* of the [R]{.proglang}packages set. Of course, we don't build every
CRAN package, merely a handful, but these are among the most popular or the most
*at-risk* of being in a broken state. See
[here](https://github.com/rstats-on-nix/monitor_health/actions).


## Additional features of the rix package

If one wishes to run pipelines written using the [targets]{.pkg} package
[@landau2021] on Github Actions, [rix]{.pkg} features a function called
`tar_nix_ga()`, inspired by the `tar_github_actions()` function from the
[targets]{.pkg} package. This function writes a YAML file under
`.github/workflows/` which then runs the [targets]{.pkg} pipeline using Github
Actions at each push, in a completely reproducible environment. For such an
example, consult the code in this
repository^[https://github.com/b-rodrigues/rix_cicd].

The final feature that we provide is the ability to run one arbitrary function
from what we call a *subshell*. Suppose that you are running the latest version
of R, and that you wish or need to run one particular function from an older
release of R, or from an older package. Using the `with_nix()` function, it is
possible to run this single function inside the right environment, and recover
its output in the main session. To illustrate, consider the following two lines
of code:

```{r, eval = FALSE}
set.seed(1234)
sample(seq(1, 10), 5)
```


```{r, include = FALSE}
set.seed(1234)
out_r <- sample(seq(1, 10), 5)
set.seed(NULL)
```

On versions of [R]{.proglang}released after version 3.6, these two lines return the
following vector: `r out_r`, but in versions prior to 3.6, the result will be
different. This is a documented change as shown in the [R]{.proglang}version 3.6 release
notes.^[https://stat.ethz.ch/pipermail/r-announce/2019/000641.html]

When trying to reproduce a study made on versions prior to 3.6, a replicator
will need to take this into account. Using the `with_nix()` function, the
original results can be replicated even from the latest version of R.

The first step is to create an environment with the old release of R:

```{r, include = FALSE}
library(rix)

path_subshell <- tempdir()

rix(
  r_ver = "3.5.3",
  overwrite = TRUE,
  project_path = path_subshell
)
```

```{r, eval = F}
library(rix)

path_subshell <- tempdir()

rix(
  r_ver = "3.5.3",
  overwrite = TRUE,
  project_path = path_subshell
)
```

We recommend `path_subshell` to be a subfolder of the main project. Using
`rix()` we generate a `default.nix` file that will provide a shell with R
version 3.5.3 when built. When calling `rix()`, another function is also called,
`rix_init()`, which generates an `.Rprofile` file in the same subfolder as where
the subshell's `default.nix` is located. This `.Rprofile` file ensures that the
R session that will be spawned from this subshell does not get any interference
from the main session it gets called from.

We can now use this shell to generate our vector of random numbers using
`with_nix()`:

```{r, eval = F}
out_subshell <- with_nix(
    expr = function(){
      set.seed(1234)
      a <- sample(seq(1, 10), 5)
      set.seed(NULL)
      return(a)
    },
    program = "R",
    project_path = path_subshell,
    message_type = "simple"
  )

```

```{r, include = FALSE}
out_subshell <- with_nix(
    expr = function(){
      set.seed(1234)
      a <- sample(seq(1, 10), 5)
      set.seed(NULL)
      return(a)
    },
    program = "R",
    project_path = path_subshell,
    message_type = "simple"
  )

```

We should say that `with_nix()` prints many status messages to the console while
running, which we don't show here for space reasons.

The `expr` argument of `with_nix()` can be arbitrarily complex, but must be
wrapped inside a `function()` call. The value of `out_subshell` is `r
out_subshell`, and is indeed different than the one generated from a recent
version of R.

It is possible to use `with_nix()` from an [R]{.proglang}session that was installed itself
via Nix, or from a regular [R]{.proglang}installation.

## Conclusion

There are many tools to make one’s analyses reproducible, but [Nix]{.pkg} distinguishes
itself from these in that its main concern is in deploying the complete set of
packages that are *closed under the ''depends on'' relation*: [Nix]{.pkg} does not
simply install one piece of software, but its dependencies, and their
dependencies. This makes [Nix]{.pkg} extremely useful for reproducible research, but
because it solves a complex problem, it is a complex tool. With [rix]{.pkg}, we
wish to make using [Nix]{.pkg} more accessible by providing a familiar interface and
user experience to [R]{.proglang} users. Because it is possible to build
reproducible development shells using  [Nix]{.pkg}, it can accomodate any
use case: running scripts, pipelines, interactive [shiny]{.pkg} applications,
and serve [plumber]{.pkg} application programming interfaces.

## Acknowledgments {.unnumbered}

:::{.callout}

All acknowledgments (note the AE spelling) should be collected in this
unnumbered section before the references. It may contain the usual information
about funding and feedback from colleagues/reviewers/etc. Furthermore,
information such as relative contributions of the authors may be added here
(if any).

:::

## References {.unnumbered}

:::{#refs}

:::

{{< pagebreak >}}

## Appendix {#sec-appendix .unnumbered}

Here is the [Nix]{.pkg} expression generated from the call to the `rix()`
function of section #sec-repro-nix:

```{r, echo = FALSE}
library(rix)

rix(r_ver = "4.3.1",
    r_pkgs = c("dplyr", "chronicler", "AER@1.2-8"),
    system_pkgs = c("quarto", "git"),
    tex_pkgs = c(
          "amsmath",
          "framed",
          "fvextra",
          "environ",
          "fontawesome5",
          "orcidlink",
          "pdfcol",
          "tcolorbox",
          "tikzfill"
    ),
    git_pkgs = list(
                 list(package_name = "rix",
                   repo_url = "https://github.com/b-rodrigues/rix/",
                   branch_name = "master",
                   commit = "ea92a88ecdfc2d74bdf1dde3e441d008521b1756"),
                 list(package_name = "fusen",
                   repo_url = "https://github.com/ThinkR-open/fusen",
                   branch_name = "main",
                   commit = "d617172447d2947efb20ad6a4463742b8a5d79dc")
    ),
    ide = "rstudio",
    project_path = tempdir(),
    overwrite = TRUE,
    print = TRUE)
```


:::{.callout}

Appendices can be included after the bibliography (with a page break). Each
section within the appendix should have a proper section title (rather than
just _Appendix_).

For more technical style details, please check out JSS's style FAQ at
[https://www.jstatsoft.org/pages/view/style#frequently-asked-questions]
which includes the following topics:

- Title vs. sentence case.
- Graphics formatting.
- Naming conventions.
- Turning JSS manuscripts into [R]{.proglang} package vignettes.
- Trouble shooting.
- Many other potentially helpful details…

:::

## Using BibTeX {#sec-bibtex .unnumbered}

:::{.callout}

References need to be provided in a {{< bibtex >}} file (`.bib`). All
references should be made with `@cite` syntax. This commands yield different
formats of author-year citations and allow to include additional details (e.g.,pages, chapters, \dots) in brackets. In case you are not familiar with these
commands see the JSS style FAQ for details.

Cleaning up {{< bibtex >}} files is a somewhat tedious task -- especially
when acquiring the entries automatically from mixed online sources. However,
it is important that informations are complete and presented in a consistent
style to avoid confusions. JSS requires the following format.

- item JSS-specific markup (`\proglang`, `\pkg`, `\code`) should be used in the references.
- item Titles should be in title case.
- item Journal titles should not be abbreviated and in title case.
- item DOIs should be included where available.
- item Software should be properly cited as well. For [R]{.proglang} packages `citation("pkgname")` typically provides a good starting point.

:::


